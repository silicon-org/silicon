// RUN: silc %s | firtool --format=mlir

mod Arbiter {
    input in_valid_0: uint<1>;
    input in_valid_1: uint<1>;
    input in_valid_2: uint<1>;
    input in_valid_3: uint<1>;
    input in_req_0: uint<42>;
    input in_req_1: uint<42>;
    input in_req_2: uint<42>;
    input in_req_3: uint<42>;
    output in_ready_0: uint<1> = 0;
    output in_ready_1: uint<1> = 0;
    output in_ready_2: uint<1> = 0;
    output in_ready_3: uint<1> = 0;
    output in_resp_0: uint<19> = 0;
    output in_resp_1: uint<19> = 0;
    output in_resp_2: uint<19> = 0;
    output in_resp_3: uint<19> = 0;

    output out_valid: uint<1> = 0;
    output out_req: uint<42> = 0;
    input out_ready: uint<1>;
    input out_resp: uint<19>;

    let tmp_ready_0 = wire(0);
    let tmp_ready_1 = wire(0);
    let tmp_ready_2 = wire(0);
    let tmp_ready_3 = wire(0);
    let tmp_resp_0 = wire(0);
    let tmp_resp_1 = wire(0);
    let tmp_resp_2 = wire(0);
    let tmp_resp_3 = wire(0);
    in_ready_0 = tmp_ready_0.get();
    in_ready_1 = tmp_ready_1.get();
    in_ready_2 = tmp_ready_2.get();
    in_ready_3 = tmp_ready_3.get();
    in_resp_0 = tmp_resp_0.get();
    in_resp_1 = tmp_resp_1.get();
    in_resp_2 = tmp_resp_2.get();
    in_resp_3 = tmp_resp_3.get();

    let tmp_out_valid = wire(0);
    let tmp_out_req = wire(0);
    out_valid = tmp_out_valid.get();
    out_req = tmp_out_req.get();

    arbitrate4(
        in_valid_0,
        in_valid_1,
        in_valid_2,
        in_valid_3,
        in_req_0,
        in_req_1,
        in_req_2,
        in_req_3,
        tmp_ready_0,
        tmp_ready_1,
        tmp_ready_2,
        tmp_ready_3,
        tmp_resp_0,
        tmp_resp_1,
        tmp_resp_2,
        tmp_resp_3,
        tmp_out_valid,
        tmp_out_req,
        out_ready,
        out_resp,
    );
}

fn arbitrate2(
    in_valid_0: uint<1>,
    in_valid_1: uint<1>,
    in_req_0: uint<42>,
    in_req_1: uint<42>,
    in_ready_0: Wire<uint<1>>,
    in_ready_1: Wire<uint<1>>,
    in_resp_0: Wire<uint<19>>,
    in_resp_1: Wire<uint<19>>,
    out_valid: Wire<uint<1>>,
    out_req: Wire<uint<42>>,
    out_ready: uint<1>,
    out_resp: uint<19>,
) {
    let which = in_valid_1;
    let valid = which.mux(in_valid_1, in_valid_0);
    let req = which.mux(in_req_1, in_req_0);
    in_ready_0.set(which.mux(0, out_ready));
    in_ready_1.set(which.mux(out_ready, 0));
    in_resp_0.set(which.mux(0, out_resp));
    in_resp_1.set(which.mux(out_resp, 0));

    out_valid.set(valid);
    out_req.set(req);
}

fn arbitrate4(
    in_valid_0: uint<1>,
    in_valid_1: uint<1>,
    in_valid_2: uint<1>,
    in_valid_3: uint<1>,
    in_req_0: uint<42>,
    in_req_1: uint<42>,
    in_req_2: uint<42>,
    in_req_3: uint<42>,
    in_ready_0: Wire<uint<1>>,
    in_ready_1: Wire<uint<1>>,
    in_ready_2: Wire<uint<1>>,
    in_ready_3: Wire<uint<1>>,
    in_resp_0: Wire<uint<19>>,
    in_resp_1: Wire<uint<19>>,
    in_resp_2: Wire<uint<19>>,
    in_resp_3: Wire<uint<19>>,
    out_valid: Wire<uint<1>>,
    out_req: Wire<uint<42>>,
    out_ready: uint<1>,
    out_resp: uint<19>,
) {
    let in_valid_01 = wire(0);
    let in_valid_23 = wire(0);
    let in_req_01 = wire(0);
    let in_req_23 = wire(0);
    let in_ready_01 = wire(0);
    let in_ready_23 = wire(0);
    let in_resp_01 = wire(0);
    let in_resp_23 = wire(0);

    arbitrate2(
        in_valid_0,
        in_valid_1,
        in_req_0,
        in_req_1,
        in_ready_0,
        in_ready_1,
        in_resp_0,
        in_resp_1,
        in_valid_01,
        in_req_01,
        in_ready_01.get(),
        in_resp_01.get(),
    );

    arbitrate2(
        in_valid_2,
        in_valid_3,
        in_req_2,
        in_req_3,
        in_ready_2,
        in_ready_3,
        in_resp_2,
        in_resp_3,
        in_valid_23,
        in_req_23,
        in_ready_23.get(),
        in_resp_23.get(),
    );

    arbitrate2(
        in_valid_01.get(),
        in_valid_23.get(),
        in_req_01.get(),
        in_req_23.get(),
        in_ready_01,
        in_ready_23,
        in_resp_01,
        in_resp_23,
        out_valid,
        out_req,
        out_ready,
        out_resp,
    );
}
