// RUN: silc --dump-resolved %s | FileCheck %s

// CHECK-LABEL: ModItem "Foo"
// CHECK-SAME: [[FOO_ID:@.+]]
mod Foo {
    // CHECK: InputStmt "a" {{.*}}[[INPUT_ID:@.+]]
    input a: uint<32>;

    // CHECK: IdentExpr "a" binding=InputStmt([[INPUT_ID]])
    output b: uint<32> = a;

    // CHECK: IdentExpr "Bar" binding=ModItem([[BAR_ID:@.+]])
    output c: uint<42> = Bar;

    // CHECK: LetStmt "d" {{.*}}[[LET_ID:@.+]]
    // CHECK: IdentExpr "a" binding=InputStmt([[INPUT_ID]])
    let d: uint<32> = a;

    // CHECK: IdentExpr "d" binding=LetStmt([[LET_ID]])
    let e: uint<32> = d;

    // CHECK: LetStmt "x" {{.*}}[[OUTER:@.+]]
    let x;
    if a == d {
        // CHECK: then_stmts[0]: LetStmt "x" {{.*}}[[INNER_THEN:@.+]]
        let x;
        // CHECK: IdentExpr "x" binding=LetStmt([[INNER_THEN]])
        x;
    } else {
        // CHECK: else_stmts[0]: LetStmt "x" {{.*}}[[INNER_ELSE:@.+]]
        let x;
        // CHECK: IdentExpr "x" binding=LetStmt([[INNER_ELSE]])
        x;
    }
    // CHECK: IdentExpr "x" binding=LetStmt([[OUTER]])
    x;
}

// CHECK-LABEL: ModItem "Bar"
// CHECK-SAME: [[BAR_ID]]
mod Bar {
    // CHECK: IdentExpr "Foo" binding=ModItem([[FOO_ID]])
    output a: uint<42> = Foo;
}

// CHECK-LABEL: FnItem "f1"
fn f1() {
    // CHECK: IdentExpr "f2" binding=FnItem([[F2_ID:@.+]])
    f2;
    // CHECK: CallExpr "f2" binding=FnItem([[F2_ID:@.+]])
    f2();
}

// CHECK-LABEL: FnItem "f2"
// CHECK-SAME: [[F2_ID]]
// CHECK: FnArg "x" {{.*}}[[ARG_ID:@.+]]
fn f2(x: uint<32>) {
    // CHECK: IdentExpr "x" binding=FnArg([[ARG_ID]])
    x;
}

// CHECK-LABEL: FnItem "f3"
// CHECK: FnParam "N" {{.*}}[[PARAM_ID:@.+]]
// CHECK: FnArg "x"
// CHECK:   ty: UIntType
// CHECK:     size: IdentExpr "N" binding=FnParam([[PARAM_ID]])
fn f3<N>(x: uint<N>) {
    // CHECK: ExprStmt
    // CHECK:   IdentExpr "N" binding=FnParam([[PARAM_ID]])
    N;
}
