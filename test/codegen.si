// RUN: silc %s | FileCheck %s

// CHECK-LABEL: hw.module @Foo()
mod Foo {}

// CHECK-LABEL: hw.module @Bar()
mod Bar {}

// CHECK-LABEL: hw.module @InputsOutputs
// CHECK-SAME: in %a : i32
// CHECK-SAME: out b : i42
mod InputsOutputs {
    input a: uint<32>;
    output b: uint<42> = 9001u42;
    // CHECK: hw.output %c9001_i42 : i42
}

// CHECK-LABEL: hw.module @Statements
mod Statements {
    let v0: uint<32>;
    let v1: uint<32>;
    let v2: uint<32> = 2u32;
    v1 = v2;
    // CHECK: hw.output %c2_i32
    output a: uint<32> = v1;
}

// CHECK-LABEL: hw.module @Expressions
mod Expressions {
    input a: uint<16>;
    input b: uint<16>;
    input c: uint<1>;

    // CHECK: hw.constant 9001 : i42
    9001u42;

    // CHECK: comb.sub %c0_i16, %a : i16
    -a;
    // CHECK: comb.xor %c-1_i16, %a : i16
    !a;

    // CHECK: comb.add %a, %b : i16
    a + b;
    // CHECK: comb.sub %a, %b : i16
    a - b;

    // CHECK: comb.concat %a, %b : i16, i16
    concat(a, b);

    // CHECK: comb.extract %a from 5 : (i16) -> i1
    a.bit(5);
    // CHECK: comb.extract %a from 9 : (i16) -> i4
    a.slice(9, 4);
    // CHECK: comb.mux %c, %a, %b : i16
    c.mux(a, b);
}

// CHECK-LABEL: hw.module @Identifiers
// CHECK-SAME: in %a : i42
// CHECK-SAME: out x : i42
// CHECK-SAME: out y : i42
mod Identifiers {
    input a: uint<42>;
    output x: uint<42>;
    output y: uint<42>;
    let z: uint<42> = a;
    y = z;
    x = y;
    // CHECK: hw.output %a, %a
}

// CHECK-LABEL: hw.module @LetUpdates
mod LetUpdates {
    input a: uint<3>;
    input b: uint<3>;
    input c: uint<3>;

    // CHECK: [[X0:%.+]] = comb.add %c0_i3, %a
    // CHECK: [[X1:%.+]] = comb.add [[X0]], %b
    // CHECK: [[X2:%.+]] = comb.add [[X1]], %c
    let x: uint<3> = 0u3;
    x = x + a;
    x = x + b;
    x = x + c;

    // CHECK: [[Y0:%.+]] = comb.add %c1_i3, %a
    // CHECK: [[Y1:%.+]] = comb.add [[Y0]], %b
    // CHECK: [[Y2:%.+]] = comb.add [[Y1]], %c
    let y: uint<3> = 1u3;
    let y: uint<3> = y + a;
    let y: uint<3> = y + b;
    let y: uint<3> = y + c;
}

// CHECK-LABEL: hw.module @WiresAndRegisters
mod WiresAndRegisters {
    input clock: uint<1>;
    // CHECK: [[WIRE:%.+]] = hw.wire %c1337_i42
    // CHECK: [[CLOCK:%.+]] = seq.to_clock %clock
    // CHECK: [[REG:%.+]] = seq.compreg [[WIRE]], [[CLOCK]]
    // CHECK: hw.output [[REG]]
    let x: Wire<uint<42>> = wire(0u42);
    let y: Reg<uint<42>> = reg(clock, 0u42);
    output z: uint<42> = y.current();
    y.next(x.get());
    x.set(1337u42);
}
