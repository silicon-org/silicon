// RUN: silc %s | FileCheck %s

// CHECK-LABEL: hw.module @Foo()
mod Foo {}

// CHECK-LABEL: hw.module @Bar()
mod Bar {}

// CHECK-LABEL: hw.module @InputsOutputs
// CHECK-SAME: in %a : i32
// CHECK-SAME: out b : i42
mod InputsOutputs {
    input a: uint<32>;
    output b: uint<42> = 9001u42;
    // CHECK: hw.output %c9001_i42 : i42
}

// CHECK-LABEL: hw.module @Statements
mod Statements {
    // CHECK: %v0 = hw.wire %c2_i32
    // CHECK: %v1 = hw.wire %v0
    // CHECK: %v2 = hw.wire %v0
    let v0: uint<32>;
    let v1: uint<32> = v0;
    v0 = 1u32;
    let v2: uint<32> = v0;
    v0 = 2u32;
}

// CHECK-LABEL: hw.module @Expressions
mod Expressions {
    input a: uint<16>;
    input b: uint<16>;
    input c: uint<1>;

    // CHECK: hw.constant 9001 : i42
    9001u42;

    // CHECK: comb.sub %c0_i16, %a : i16
    -a;
    // CHECK: comb.xor %c-1_i16, %a : i16
    !a;

    // CHECK: comb.add %a, %b : i16
    a + b;
    // CHECK: comb.sub %a, %b : i16
    a - b;

    // CHECK: comb.extract %a from 5 : (i16) -> i1
    a.bit(5);
    // CHECK: comb.extract %a from 9 : (i16) -> i4
    a.slice(9, 4);
    // CHECK: comb.mux %c, %a, %b : i16
    c.mux(a, b);
}

// CHECK-LABEL: hw.module @Identifiers
// CHECK-SAME: in %a : i42
// CHECK-SAME: out x : i42
// CHECK-SAME: out y : i42
mod Identifiers {
    input a: uint<42>;
    output x: uint<42>;
    output y: uint<42>;
    let z: uint<42> = a;
    y = z;
    x = y;
    // CHECK: %z = hw.wire %a
    // CHECK: hw.output %z, %z
}
