// RUN: silc --dump-ast %s | FileCheck %s

// CHECK: Root
// CHECK: ModItem "Foo"
// CHECK: ModItem "Bar"

mod Foo {}
mod Bar {}

// CHECK-LABEL: ModItem "Types"
mod Types {
    // CHECK: UIntType size=32
    let t0: uint<32>;
    // CHECK: WireType
    // CHECK:   inner: UIntType size=33
    let t1: Wire<uint<33>>;
    // CHECK: RegType
    // CHECK:   inner: UIntType size=34
    let t2: Reg<uint<34>>;
    // CHECK: UnitType
    let t3: ();
    // CHECK: TupleType
    // CHECK:   fields[0]: UIntType size=32
    // CHECK:   fields[1]: UIntType size=33
    let t4: (uint<32>, uint<33>);
}

// CHECK-LABEL: ModItem "Statements"
mod Statements {
    // CHECK: InputStmt "a"
    // CHECK: ty: UIntType size=32
    input a: uint<32>;
    // CHECK: OutputStmt "b"
    // CHECK: ty: UIntType size=11
    // CHECK-NOT: expr:
    output b: uint<11>;
    // CHECK: OutputStmt "c"
    // CHECK: ty: UIntType size=19
    // CHECK: expr: IdentExpr "a"
    output c: uint<19> = a;

    // CHECK: LetStmt "v0"
    // CHECK: ty: UIntType size=42
    let v0: uint<42>;
    // CHECK: LetStmt "v1"
    // CHECK: ty: UIntType size=42
    // CHECK: expr: IdentExpr "a"
    let v1: uint<42> = a;

    // CHECK: ExprStmt
    // CHECK: expr: IdentExpr "a"
    a;

    // CHECK: AssignStmt
    // CHECK: lhs: IdentExpr "v0"
    // CHECK: rhs: IdentExpr "a"
    v0 = a;
}

// CHECK-LABEL: ModItem "Expressions"
mod Expressions {
    // CHECK: IntLitExpr value=1337
    // CHECK-NOT: width=
    1337;
    // CHECK: IntLitExpr value=9001 width=42
    9001u42;
    // CHECK: IdentExpr "a"
    a;
    // CHECK: ParenExpr
    // CHECK:   IdentExpr "a"
    (a);
    // CHECK: TupleExpr
    // CHECK:   fields[0]: IdentExpr "a"
    // CHECK:   fields[1]: IdentExpr "b"
    (a, b);
    // CHECK: TupleFieldExpr field=42
    // CHECK:   IdentExpr "a"
    a.42;
    // CHECK: TupleFieldExpr field=3
    // CHECK:   TupleFieldExpr field=2
    // CHECK:     TupleFieldExpr field=1
    // CHECK:       IdentExpr "a"
    a.1.2.3;

    // CHECK: BlockExpr
    {}
    // CHECK: BlockExpr
    {};
    // CHECK: BlockExpr
    // CHECK:   result: IdentExpr "a"
    { a };
    // CHECK: BlockExpr
    // CHECK:   stmts[0]: ExprStmt
    // CHECK:     IdentExpr "a"
    // CHECK-NOT: result:
    { a; };
    // CHECK: BlockExpr
    // CHECK:   stmts[0]: LetStmt "x"
    // CHECK:   result: IdentExpr "a"
    { let x; a };

    // CHECK: UnaryExpr NEG
    // CHECK:   arg: IdentExpr "a"
    -a;
    // CHECK: UnaryExpr NOT
    // CHECK:   arg: IdentExpr "a"
    !a;
    // CHECK: UnaryExpr NOT
    // CHECK:   arg: UnaryExpr NEG
    // CHECK:     arg: IdentExpr "a"
    !-a;

    // CHECK: BinaryExpr ADD
    // CHECK:   lhs: IntLitExpr value=1
    // CHECK:   rhs: IntLitExpr value=2
    1u16 + 2u16;
    // CHECK: BinaryExpr SUB
    // CHECK:   lhs: IntLitExpr value=4
    // CHECK:   rhs: IntLitExpr value=3
    4u16 - 3u16;

    // CHECK: CallExpr "a"
    a();
    // CHECK: CallExpr "a"
    // CHECK:   args[0]: IdentExpr "b"
    a(b);
    // CHECK: CallExpr "a"
    // CHECK:   args[0]: IdentExpr "b"
    // CHECK:   args[1]: IdentExpr "c"
    a(b, c);

    // CHECK: FieldCallExpr "b"
    // CHECK:   target: IdentExpr "a"
    a.b();
    // CHECK: FieldCallExpr "b"
    // CHECK:   target: IdentExpr "a"
    // CHECK:   args[0]: IdentExpr "c"
    // CHECK:   args[1]: IdentExpr "d"
    a.b(c, d);
    // CHECK: FieldCallExpr "c"
    // CHECK:   target: FieldCallExpr "b"
    // CHECK:     target: IdentExpr "a"
    a.b().c();
}

// CHECK-LABEL: FnItem "f1"
fn f1() {
    // CHECK: ReturnStmt
    return;
    // CHECK: ReturnStmt
    // CHECK:   IntLitExpr value=42
    return 42;
}

// CHECK-LABEL: FnItem "f2"
// CHECK: return_ty: UIntType size=42
fn f2() -> uint<42> {}

// CHECK-LABEL: FnItem "f3"
// CHECK: args[0]: FnArg "x"
// CHECK:   ty: UIntType size=43
fn f3(x: uint<43>) {}

// CHECK-LABEL: FnItem "f4"
// CHECK: args[0]: FnArg "x"
// CHECK:   ty: UIntType size=44
// CHECK: args[1]: FnArg "y"
// CHECK:   ty: UIntType size=45
// CHECK: return_ty: UIntType size=46
fn f4(x: uint<44>, y: uint<45>) -> uint<46> {}
