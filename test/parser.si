// RUN: silc %s --dump-ast | FileCheck %s

// CHECK: Root
// CHECK: ModItem "Foo"
// CHECK: ModItem "Bar"

mod Foo {}
mod Bar {}

// CHECK-LABEL: ModItem "Types"
mod Types {
    // CHECK: UIntType size=32
    let t0: uint<32>;
    // CHECK: WireType
    // CHECK:   inner: UIntType size=33
    let t1: Wire<uint<33>>;
    // CHECK: RegType
    // CHECK:   inner: UIntType size=34
    let t2: Reg<uint<34>>;
}

// CHECK-LABEL: ModItem "Statements"
mod Statements {
    // CHECK: InputStmt "a"
    // CHECK: ty: UIntType size=32
    input a: uint<32>;
    // CHECK: OutputStmt "b"
    // CHECK: ty: UIntType size=11
    // CHECK-NOT: expr:
    output b: uint<11>;
    // CHECK: OutputStmt "c"
    // CHECK: ty: UIntType size=19
    // CHECK: expr: IdentExpr "a"
    output c: uint<19> = a;

    // CHECK: LetStmt "v0"
    // CHECK: ty: UIntType size=42
    let v0: uint<42>;
    // CHECK: LetStmt "v1"
    // CHECK: ty: UIntType size=42
    // CHECK: expr: IdentExpr "a"
    let v1: uint<42> = a;

    // CHECK: ExprStmt
    // CHECK: expr: IdentExpr "a"
    a;

    // CHECK: AssignStmt
    // CHECK: lhs: IdentExpr "v0"
    // CHECK: rhs: IdentExpr "a"
    v0 = a;
}

// CHECK-LABEL: ModItem "Expressions"
mod Expressions {
    // CHECK: IntLitExpr value=1337
    // CHECK-NOT: width=
    1337;
    // CHECK: IntLitExpr value=9001 width=42
    9001u42;
    // CHECK: IdentExpr "a"
    a;

    // CHECK: UnaryExpr NEG
    // CHECK:   arg: IdentExpr "a"
    -a;
    // CHECK: UnaryExpr NOT
    // CHECK:   arg: IdentExpr "a"
    !a;
    // CHECK: UnaryExpr NOT
    // CHECK:   arg: UnaryExpr NEG
    // CHECK:     arg: IdentExpr "a"
    !-a;

    // CHECK: BinaryExpr ADD
    // CHECK:   lhs: IntLitExpr value=1
    // CHECK:   rhs: IntLitExpr value=2
    1u16 + 2u16;
    // CHECK: BinaryExpr SUB
    // CHECK:   lhs: IntLitExpr value=4
    // CHECK:   rhs: IntLitExpr value=3
    4u16 - 3u16;

    // CHECK: CallExpr "a"
    a();
    // CHECK: CallExpr "a"
    // CHECK:   args[0]: IdentExpr "b"
    a(b);
    // CHECK: CallExpr "a"
    // CHECK:   args[0]: IdentExpr "b"
    // CHECK:   args[1]: IdentExpr "c"
    a(b, c);

    // CHECK: FieldCallExpr "b"
    // CHECK:   target: IdentExpr "a"
    a.b();
    // CHECK: FieldCallExpr "b"
    // CHECK:   target: IdentExpr "a"
    // CHECK:   args[0]: IdentExpr "c"
    // CHECK:   args[1]: IdentExpr "d"
    a.b(c, d);
    // CHECK: FieldCallExpr "c"
    // CHECK:   target: FieldCallExpr "b"
    // CHECK:     target: IdentExpr "a"
    a.b().c();
}
