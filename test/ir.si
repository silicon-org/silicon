// RUN: silc %s --dump-ir | FileCheck %s

// CHECK-LABEL: si.module @Foo
mod Foo {}
// CHECK-LABEL: si.module @Bar
mod Bar {}

// CHECK-LABEL: si.module @Statements
mod Statements {
    // CHECK: [[A:%.+]] = si.input "a" : i42
    input a: uint<42>;
    // CHECK: [[B:%.+]] = si.output_decl "b" : i42
    output b: uint<42>;
    // CHECK: [[C:%.+]] = si.output_decl "c" : i42
    // CHECK: si.assign [[C]], [[A]] : i42
    output c: uint<42> = a;
    // CHECK: [[U:%.+]] = si.var_decl "u" : i42
    let u: uint<42>;
    // CHECK: [[V:%.+]] = si.var_decl "v" : i42
    // CHECK: si.assign [[V]], [[A]] : i42
    let v: uint<42> = a;
    // CHECK: si.assign [[B]], [[A]] : i42
    b = a;
    // CHECK: si.assign [[U]], [[A]] : i42
    u = a;
}

// CHECK-LABEL: si.module @Expressions
mod Expressions {
    // CHECK: [[A:%.+]] = si.var_decl "a" : i19
    // CHECK: [[B:%.+]] = si.var_decl "b" : i19
    // CHECK: [[C:%.+]] = si.var_decl "c" : i1
    let a: uint<19>;
    let b: uint<19>;
    let c: uint<1>;

    // CHECK: si.constant 9001 : i42
    9001u42;

    // CHECK: si.neg [[A]] : i19
    -a;
    // CHECK: si.not [[A]] : i19
    !a;

    // CHECK: si.add [[A]], [[B]] : i19
    a + b;
    // CHECK: si.sub [[A]], [[B]] : i19
    a - b;

    // CHECK: si.concat [[A]], [[B]], [[C]] : (i19, i19, i1) -> i39
    concat(a, b, c);

    // CHECK: si.extract [[A]], #builtin.int<5> : i19 -> i1
    a.bit(5);
    // CHECK: si.extract [[A]], #builtin.int<9> : i19 -> i4
    a.slice(9, 4);
    // CHECK: si.mux [[C]], [[A]], [[B]] : i19
    c.mux(a, b);
}

// CHECK-LABEL: si.module @LetUpdates
mod LetUpdates {
    // CHECK: [[A:%.+]] = si.input "a"
    // CHECK: [[B:%.+]] = si.input "b"
    // CHECK: [[C:%.+]] = si.input "c"
    input a: uint<3>;
    input b: uint<3>;
    input c: uint<3>;

    // CHECK: [[X:%.+]] = si.var_decl "x"
    // CHECK: [[CONST:%.+]] = si.constant 0 : i3
    // CHECK: si.assign [[X]], [[CONST]]
    // CHECK: [[TMP:%.+]] = si.add [[X]], [[A]]
    // CHECK: si.assign [[X]], [[TMP]]
    // CHECK: [[TMP:%.+]] = si.add [[X]], [[B]]
    // CHECK: si.assign [[X]], [[TMP]]
    // CHECK: [[TMP:%.+]] = si.add [[X]], [[C]]
    // CHECK: si.assign [[X]], [[TMP]]
    let x: uint<3> = 0u3;
    x = x + a;
    x = x + b;
    x = x + c;

    // CHECK: [[Y0:%.+]] = si.var_decl "y"
    // CHECK: [[CONST:%.+]] = si.constant 1 : i3
    // CHECK: si.assign [[Y0]], [[CONST]]
    // CHECK: [[Y1:%.+]] = si.var_decl "y"
    // CHECK: [[TMP:%.+]] = si.add [[Y0]], [[A]]
    // CHECK: si.assign [[Y1]], [[TMP]]
    // CHECK: [[Y2:%.+]] = si.var_decl "y"
    // CHECK: [[TMP:%.+]] = si.add [[Y1]], [[B]]
    // CHECK: si.assign [[Y2]], [[TMP]]
    // CHECK: [[Y3:%.+]] = si.var_decl "y"
    // CHECK: [[TMP:%.+]] = si.add [[Y2]], [[C]]
    // CHECK: si.assign [[Y3]], [[TMP]]
    let y: uint<3> = 1u3;
    let y: uint<3> = y + a;
    let y: uint<3> = y + b;
    let y: uint<3> = y + c;
}

// CHECK-LABEL: si.module @WiresAndRegisters
mod WiresAndRegisters {
    // CHECK: [[CLOCK:%.+]] = si.input "clock" : i1
    input clock: uint<1>;

    // CHECK: [[X:%.+]] = si.var_decl "x" : !si.wire<i42>
    // CHECK: [[WIRE:%.+]] = si.wire_decl : !si.wire<i42>
    // CHECK: [[TMP:%.+]] = si.constant 0 : i42
    // CHECK: si.wire_set [[WIRE]], [[TMP]] : !si.wire<i42>
    // CHECK: si.assign [[X]], [[WIRE]] : !si.wire<i42>
    let x: Wire<uint<42>> = wire(0u42);

    // CHECK: [[Y:%.+]] = si.var_decl "y" : !si.reg<i42>
    // CHECK: [[REG:%.+]] = si.reg_decl [[CLOCK]] : !si.reg<i42>
    // CHECK: [[TMP:%.+]] = si.constant 0 : i42
    // CHECK: si.reg_next [[REG]], [[TMP]] : !si.reg<i42>
    // CHECK: si.assign [[Y]], [[REG]] : !si.reg<i42>
    let y: Reg<uint<42>> = reg(clock, 0u42);

    // CHECK: si.reg_current [[Y]] : !si.reg<i42>
    y.current();

    // CHECK: [[TMP:%.+]] = si.wire_get [[X]] : !si.wire<i42>
    // CHECK: si.reg_next [[Y]], [[TMP]] : !si.reg<i42>
    y.next(x.get());

    // CHECK: [[TMP:%.+]] = si.constant 1337 : i42
    // CHECK: si.wire_set [[X]], [[TMP]] : !si.wire<i42>
    x.set(1337u42);
}

