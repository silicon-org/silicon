// RUN: silc --dump-ir %s | FileCheck %s

// CHECK-LABEL: si.module @Foo
mod Foo {}
// CHECK-LABEL: si.module @Bar
mod Bar {}

// CHECK-LABEL: si.module @Types
mod Types {
    // CHECK: si.var_decl "a" : !si.ref<!si.tuple<[i1, i2]>>
    let a: (uint<1>, uint<2>);
}

// CHECK-LABEL: si.module @Statements
mod Statements {
    // CHECK: [[A:%.+]] = si.input "a" : i42
    input a: uint<42>;
    // CHECK: [[B:%.+]] = si.output_decl "b" : !si.ref<i42>
    output b: uint<42>;
    // CHECK: [[C:%.+]] = si.output_decl "c" : !si.ref<i42>
    // CHECK: si.assign [[C]], [[A]] : !si.ref<i42>
    output c: uint<42> = a;
    // CHECK: [[U:%.+]] = si.var_decl "u" : !si.ref<i42>
    let u: uint<42>;
    // CHECK: [[V:%.+]] = si.var_decl "v" : !si.ref<i42>
    // CHECK: si.assign [[V]], [[A]] : !si.ref<i42>
    let v: uint<42> = a;
    // CHECK: si.assign [[B]], [[A]] : !si.ref<i42>
    b = (a);
    // CHECK: si.assign [[U]], [[A]] : !si.ref<i42>
    u = a;
}

// CHECK-LABEL: si.func @Expressions
fn Expressions(
    // CHECK-SAME: [[A:%a]] : i19
    a: uint<19>,
    // CHECK-SAME: [[B:%b]] : i19
    b: uint<19>,
    // CHECK-SAME: [[C:%c]] : i1
    c: uint<1>,
    // CHECK-SAME: [[E:%e]] : !si.ref<i19>
    e: &uint<19>,
) {
    // CHECK: si.constant 9001 : i42
    9001u42;
    // CHECK: si.constant_unit : !si.unit
    ();

    // CHECK: si.neg [[A]] : i19
    -a;
    // CHECK: si.not [[A]] : i19
    !a;
    // CHECK: si.ref [[A]] : !si.ref<i19>
    &a;
    // CHECK: si.deref [[E]] : !si.ref<i19>
    *e;

    // CHECK: si.add [[A]], [[B]] : i19
    a + b;
    // CHECK: si.sub [[A]], [[B]] : i19
    a - b;

    // CHECK: si.concat [[A]], [[B]], [[C]] : (i19, i19, i1) -> i39
    concat(a, b, c);

    // CHECK: si.extract [[A]], #builtin.int<5> : i19 -> i1
    a.bit(5);
    // CHECK: si.extract [[A]], #builtin.int<9> : i19 -> i4
    a.slice(9, 4);
    // CHECK: si.mux [[C]], [[A]], [[B]] : i19
    c.mux(a, b);
}

// CHECK-LABEL: si.func @LetUpdates
fn LetUpdates(
    // CHECK-SAME: [[A:%a]] : i3
    a: uint<3>,
    // CHECK-SAME: [[B:%b]] : i3
    b: uint<3>,
    // CHECK-SAME: [[C:%c]] : i3
    c: uint<3>,
) {

    // CHECK: [[X:%.+]] = si.var_decl "x"
    // CHECK: [[CONST:%.+]] = si.constant 0 : i3
    // CHECK: si.assign [[X]], [[CONST]]
    let x: uint<3> = 0u3;
    // CHECK: [[TMP1:%.+]] = si.deref [[X]]
    // CHECK: [[TMP2:%.+]] = si.add [[TMP1]], [[A]]
    // CHECK: si.assign [[X]], [[TMP2]]
    x = x + a;
    // CHECK: [[TMP1:%.+]] = si.deref [[X]]
    // CHECK: [[TMP2:%.+]] = si.add [[TMP1]], [[B]]
    // CHECK: si.assign [[X]], [[TMP2]]
    x = x + b;
    // CHECK: [[TMP1:%.+]] = si.deref [[X]]
    // CHECK: [[TMP2:%.+]] = si.add [[TMP1]], [[C]]
    // CHECK: si.assign [[X]], [[TMP2]]
    x = x + c;

    // CHECK: [[Y0:%.+]] = si.var_decl "y"
    // CHECK: [[CONST:%.+]] = si.constant 1 : i3
    // CHECK: si.assign [[Y0]], [[CONST]]
    let y: uint<3> = 1u3;
    // CHECK: [[Y1:%.+]] = si.var_decl "y"
    // CHECK: [[TMP1:%.+]] = si.deref [[Y0]]
    // CHECK: [[TMP2:%.+]] = si.add [[TMP1]], [[A]]
    // CHECK: si.assign [[Y1]], [[TMP2]]
    let y: uint<3> = y + a;
    // CHECK: [[Y2:%.+]] = si.var_decl "y"
    // CHECK: [[TMP1:%.+]] = si.deref [[Y1]]
    // CHECK: [[TMP2:%.+]] = si.add [[TMP1]], [[B]]
    // CHECK: si.assign [[Y2]], [[TMP2]]
    let y: uint<3> = y + b;
    // CHECK: [[Y3:%.+]] = si.var_decl "y"
    // CHECK: [[TMP1:%.+]] = si.deref [[Y2]]
    // CHECK: [[TMP2:%.+]] = si.add [[TMP1]], [[C]]
    // CHECK: si.assign [[Y3]], [[TMP2]]
    let y: uint<3> = y + c;
}

// CHECK-LABEL: si.module @WiresAndRegisters
mod WiresAndRegisters {
    // CHECK: [[CLOCK:%.+]] = si.input "clock" : i1
    input clock: uint<1>;

    // CHECK: [[X:%.+]] = si.var_decl "x" : !si.ref<!si.wire<i42>>
    // CHECK: [[WIRE:%.+]] = si.wire_decl : !si.wire<i42>
    // CHECK: [[TMP:%.+]] = si.constant 0 : i42
    // CHECK: si.wire_set [[WIRE]], [[TMP]] : !si.wire<i42>
    // CHECK: si.assign [[X]], [[WIRE]] : !si.ref<!si.wire<i42>>
    let x: Wire<uint<42>> = wire(0u42);

    // CHECK: [[Y:%.+]] = si.var_decl "y" : !si.ref<!si.reg<i42>>
    // CHECK: [[REG:%.+]] = si.reg_decl [[CLOCK]] : !si.reg<i42>
    // CHECK: [[TMP:%.+]] = si.constant 0 : i42
    // CHECK: si.reg_next [[REG]], [[TMP]] : !si.reg<i42>
    // CHECK: si.assign [[Y]], [[REG]] : !si.ref<!si.reg<i42>>
    let y: Reg<uint<42>> = reg(clock, 0u42);

    // CHECK: [[TMP:%.+]] = si.deref [[Y]] : !si.ref<!si.reg<i42>>
    // CHECK: si.reg_current [[TMP]] : !si.reg<i42>
    y.current();

    // CHECK: [[TMP1:%.+]] = si.deref [[Y]] : !si.ref<!si.reg<i42>>
    // CHECK: [[TMP2:%.+]] = si.deref [[X]] : !si.ref<!si.wire<i42>>
    // CHECK: [[TMP3:%.+]] = si.wire_get [[TMP2]] : !si.wire<i42>
    // CHECK: si.reg_next [[TMP1]], [[TMP3]] : !si.reg<i42>
    y.next(x.get());

    // CHECK: [[TMP1:%.+]] = si.deref [[X]] : !si.ref<!si.wire<i42>>
    // CHECK: [[TMP2:%.+]] = si.constant 1337 : i42
    // CHECK: si.wire_set [[TMP1]], [[TMP2]] : !si.wire<i42>
    x.set(1337u42);
}

// CHECK-LABEL: si.func @empty_func
// CHECK-SAME: () {
fn empty_func() {
    // CHEfCK: si.return
}

// CHECK-LABEL: si.func @simple_func
// CHECK-SAME: () {
fn simple_func() {
    // CHECK: si.return
    return;
}

// CHECK-LABEL: si.func @only_outputs
// CHECK-SAME: () -> i42 {
fn only_outputs() -> uint<42> {
    // CHECK: [[TMP:%.+]] = si.constant 0 : i42
    // CHECK: si.return [[TMP]] : i42
    return 0;
}

// CHECK-LABEL: si.func @only_inputs
// CHECK-SAME: ([[ARG0:%.+]]: i43) {
fn only_inputs(x: uint<43>) {
}

// CHECK-LABEL: si.func @inputs_and_outputs
// CHECK-SAME: ([[ARG0:%.+]] : i44, [[ARG1:%.+]] : i44) -> i44 {
fn inputs_and_outputs(x: uint<44>, y: uint<44>) -> uint<44> {
    // CHECK: [[TMP:%.+]] = si.add [[ARG0]], [[ARG1]] : i44
    // CHECK: si.return [[TMP]] : i44
    return x + y;
}

// CHECK-LABEL: si.func @calls
// CHECK-SAME: ([[A:%.+]] : i43, [[B:%.+]] : i44) {
fn calls(a: uint<43>, b: uint<44>) {
    // CHECK: si.call @simple_func() : () -> ()
    simple_func();
    // CHECK: [[X:%.+]] = si.var_decl "x"
    // CHECK: [[TMP:%.+]] = si.call @only_outputs() : () -> i42
    // CHECK: si.assign [[X]], [[TMP]]
    let x = only_outputs();
    // CHECK: si.call @only_inputs([[A]]) : (i43) -> ()
    only_inputs(a);
    // CHECK: [[Y:%.+]] = si.var_decl "y"
    // CHECK: [[TMP:%.+]] = si.call @inputs_and_outputs([[B]], [[B]]) : (i44, i44) -> i44
    // CHECK: si.assign [[Y]], [[TMP]]
    let y = inputs_and_outputs(b, b);
}

// CHECK-LABEL: si.func @default_literal_sizes_should_propagate_through_wires
fn default_literal_sizes_should_propagate_through_wires() {
    // CHECK: si.var_decl "x" : !si.ref<!si.wire<i0>>
    let x = wire(0);
    // CHECK: si.var_decl "y" : !si.ref<!si.reg<i0>>
    let y = reg(0, 0);
}

// CHECK-LABEL: si.func @param_func_a
fn param_func_a(a: uint<4>, b: uint<5>) {
    // CHECK: si.call @param_func_b{{.*}} : (i4, i4) -> i4
    param_func_b(a, a);
    // CHECK: si.call @param_func_b{{.*}} : (i4, i4) -> i4
    param_func_b(a, a);
    // CHECK: si.call @param_func_b{{.*}} : (i5, i5) -> i5
    param_func_b(b, b);
    // CHECK: si.call @param_func_c{{.*}} : (i4, i5) -> i5
    param_func_c(a, b);
}

fn param_func_b<N>(u: uint<N>, v: uint<N>) -> uint<N> {
    return u + v;
}

fn param_func_c<N, M>(u: uint<N>, v: uint<M>) -> uint<M> {
    return v;
}

// CHECK-LABEL: si.func @Refs
fn Refs(a: &uint<42>, b: uint<42>) -> &uint<42> {
    // CHECK: si.assign %a, %b : !si.ref<i42>
    *a = b;

    // CHECK: [[TMP:%.+]] = si.var_decl {{.+}} : !si.ref<i42>
    let c: uint<42>;
    // CHECK: si.return [[TMP]] : !si.ref<i42>
    return &c;
}

// CHECK-LABEL: si.func @Tuples
fn Tuples(a: uint<42>, b: uint<43>) {
    // CHECK: si.tuple_create %a, %b : (i42, i43) -> !si.tuple<[i42, i43]>
    (a, b);

    // CHECK: [[C:%.+]] = si.var_decl {{.+}} : !si.ref<!si.tuple<[i42, i1337]>>
    let c: (uint<42>, uint<1337>);

    // CHECK: [[TMP:%.+]] = si.deref [[C]] : !si.ref<!si.tuple<[i42, i1337]>>
    // CHECK: si.tuple_get [[TMP]], #builtin.int<0> : !si.tuple<[i42, i1337]> -> i42
    c.0;
    // CHECK: [[TMP:%.+]] = si.deref [[C]] : !si.ref<!si.tuple<[i42, i1337]>>
    // CHECK: si.tuple_get [[TMP]], #builtin.int<1> : !si.tuple<[i42, i1337]> -> i1337
    c.1;

    // CHECK: si.tuple_get_ref [[C]], #builtin.int<0> : !si.ref<!si.tuple<[i42, i1337]>> -> !si.ref<i42>
    &c.0;
    &c.1;
}
